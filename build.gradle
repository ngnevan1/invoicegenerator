plugins {
    id 'java'
    id 'jacoco'
    id 'application'
    id 'org.beryx.runtime' version '1.12.7'
}

group 'org.example'
version '1'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
    implementation 'com.google.api-client:google-api-client:2.0.1'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.34.1'
    implementation 'com.google.apis:google-api-services-sheets:v4-rev20220927-2.0.0'
    implementation 'org.apache.pdfbox:pdfbox:2.0.27'
    implementation 'commons-net:commons-net:3.8.0'
    implementation 'com.sun.mail:javax.mail:1.6.2'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.slf4j:slf4j-api:2.0.5'
    implementation 'ch.qos.logback:logback-classic:1.4.5'
    implementation 'javax.xml.bind:jaxb-api:2.3.0'
}

application {
    mainClassName = 'InvoiceGenerator.Main'
    applicationName = 'InvoiceGenerator'
    applicationDefaultJvmArgs = ['-Dlogback.configurationFile=$APPDIR/logback.xml']
}

jar {
    manifest {
        attributes 'Implementation-Title': "InvoiceGenerator",
                'Main-Class': 'InvoiceGenerator.Main'
    }
}

runtime {
    modules = ['java.naming', 'java.xml']


    jpackage {
        def currentOs = org.gradle.internal.os.OperatingSystem.current()
        if(currentOs.windows) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
            imageOptions = ['--win-console']
        } else if (currentOs.linux) {
            installerOptions += ['--linux-package-name', 'non-modular-hello','--linux-shortcut']
        } else if (currentOs.macOsX) {
            installerOptions += ['--mac-package-name', 'non-modular-hello']
            installerType = 'dmg'
        }
    }
}


tasks.jpackage.doFirst {
    def currentOs = org.gradle.internal.os.OperatingSystem.current()
    def basePath = currentOs.windows ? project.name : currentOs.linux ? "$project.name/lib" : "${project.name}.app/Contents"
    copy {
        from('src/main/resources')
        into("$buildDir/jpackage/$basePath/app")
    }
}

test {
    useJUnitPlatform()
}

